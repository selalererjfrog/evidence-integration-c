apiVersion: batch/v1
kind: Job
metadata:
  name: post-sync-job-evidence
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    spec:
      volumes:
      - name: jf-secrets-volume
        secret:
          secretName: apptrustswampupc-jf-cli
      - name: signing-key
        secret:
          secretName: evd-signing-key
      containers:
      - name: bash-runner
        image: ubuntu:latest
        volumeMounts:
        - name: jf-secrets-volume
          mountPath: /etc/jfsecrets
          readOnly: true
        - name: signing-key
          mountPath: /etc/signkey
          readOnly: true
        env:
          - name: MARKDOWN
            value: |
              ### Deployment Evidence

              ### Summary
              - **Deployment State:** {{ .deploymentState }}
              - **Kubernetes Cluster ID:** `{{ .k8sClusterId }}`
              - **Time:** `{{ .time }}`

              ### Running Pods
              The following pods were found running at the time of evaluation:

              {{ .runningPods[] }}
        command: ["/bin/bash", "-c"]
        args:
          - |
            # These 2 below will be automatically replaced by the release-application-version.yml GitHub workflow
            EVD_DEMO_APP_NAME=quotopia-app
            EVD_DEMO_APP_VER=45

            echo "JF secrets:"
            ls -l /etc/jfsecrets

            echo "Signing key secrets:"
            ls -l /etc/signkey

            # Check the required secrets exist.
            if [ ! -f /etc/jfsecrets/JF_TOKEN ]; then
                echo "Secret /etc/jfsecrets/JF_TOKEN is missing."
                exit 1
            fi

            if [ ! -f /etc/signkey/SIGNING_KEY ]; then
                echo "Secret /etc/signkey/SIGNING_KEY is missing."
                exit 1
            fi

            # Install jq
            echo "Installing jq"
            apt-get update -y 1>/dev/null 2>/dev/null
            apt-get install -q -y jq
            if [ $? -ne 0 ]; then
                echo "Failed to install jq"
                exit 1
            fi

            # Install curl
            echo "Installing curl"
            apt-get install -y curl
            if [ $? -ne 0 ]; then
                echo "Failed to instll curl"
                exit 1
            fi

            # Install kubctl
            K8S_URL="https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl"
            echo "Downloading k8s: $K8S_URL"
            curl -LO "$K8S_URL" 
            if [ $? -ne 0 ]; then
                echo "Failed to download k8s."
                exit 1
            fi
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            if [ $? -ne 0 ]; then
                echo "Failed to install k8s."
                exit 1
            fi
            # Check client installation
            kubectl version --client
            if [ $? -ne 0 ]; then
                echo "Failed to validate kubectl client (run kubectl version --client)."
                exit 1
            fi
            # Test connection to the k8s cluster
            kubectl get po
            if [ $? -ne 0 ]; then
                echo "Failed to test kubectl connection to the k8s cluster (run kubectl get po)."
                exit 1
            fi

            # Install jfrog CLI
            curl -fL https://install-cli.jfrog.io | sh

            # Configure JSON CLI
            export CI="true"
            export JFROG_CLI_URL="https://apptrustswampupc.jfrog.io"
            export JFROG_CLI_TOKEN=$(cat /etc/jfsecrets/JF_TOKEN)
            if [ "" == "$JFROG_CLI_TOKEN" ]; then
                echo "JF_TOKEN secret is empty."
                exit 1
            fi

            echo "Adding configuration to JF CLI."
            jf c add apptrustswampupc --interactive=false --overwrite=true --url "$JFROG_CLI_URL" --access-token "$JFROG_CLI_TOKEN"
            if [ $? -ne 0 ]; then
                "Failed to configure JF CLI."
                exit 1
            fi
            jf c show


            echo "Pinging JFrog platform $JFROG_CLI_URL"
            jf rt ping
            if [ $? -ne 0 ]; then
                echo "jf rt ping failed (JFROG_CLI_URL=$JFROG_CLI_URL)."
                exit 1
            fi
            echo "Pinged JFrog platform successfully."

            SIGN_KEY=$(cat /etc/signkey/SIGNING_KEY)
            if [ "" == "$SIGN_KEY" ]; then
                echo "Signing key is empty."
                exit 1
            fi

            CLUSTER_ID=$(kubectl get namespace kube-system -o=jsonpath='{.metadata.uid}')
            RUNNING_PODS=$(kubectl -n quotopia get pods -o json |  jq '[.items[].metadata.name]')

            echo "RUNNING_PODS=$RUNNING_PODS"

            echo "quotopia-app=$EVD_DEMO_APP_NAME, 34=$EVD_DEMO_APP_VER, CLUSTER_ID=$CLUSTER_ID"

            EVIDENCE="{\"deploymentState\":\"DEPLOYED\", \"time\":\"$(date)\", \"k8sClusterId\":\"$CLUSTER_ID\", \"runningPods\":$RUNNING_PODS}"
            echo "$EVIDENCE" > predicate.json

            echo "Predicate:"
            cat predicate.json

            #echo "Markdown file before:"
            #echo "$MARKDOWN"
            #echo

            # Editing MARKDOWN with values from EVIDENCE
            MAX_ITER=30                                                                     
            CUR_ITER=0                                                                      
            while [[ "$MARKDOWN" =~ \{\{([^}]+)\}\} ]]; do                                  
              ((CUR_ITER=CUR_ITER+1))                                                       
              if [ "$CUR_ITER" -gt "$MAX_ITER" ]; then                                      
                echo "Too many iterations."                                                 
                exit 1                                                                      
              fi                                                                            
              MATCHED_PLACEHOLDER="${BASH_REMATCH[0]}"                                      
              KEY="${BASH_REMATCH[1]}"                                                      
              #echo "KEY=$KEY"                                                               
              VALUE=$(echo "$EVIDENCE" | jq "$KEY" | tr -d '"')                                 
              #echo "VALUE=$VALUE"                                                           
              MARKDOWN=${MARKDOWN/"$MATCHED_PLACEHOLDER"/"$VALUE"}                          
            done            

            echo "$MARKDOWN" > markdown.md
            #echo "Markdown file after:"
            #cat markdown.md
            #echo

            echo "Running jf evd create"
            jf evd create --project quotopia --release-bundle "$EVD_DEMO_APP_NAME" \
                --release-bundle-version "$EVD_DEMO_APP_VER" --predicate predicate.json \
                --predicate-type 'http://jfrog.com/argocd/v1' \
                --key-alias argocd --key "$SIGN_KEY" \
                --markdown markdown.md --provider-id akuity

      restartPolicy: Never
      serviceAccountName: default
